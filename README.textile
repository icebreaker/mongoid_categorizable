h1. Mongoid Categorizable

Mongoid Categorizable provides some helpers to create categorizable documents.

**WARNING: ignore this fork, this is just pure syntactic sugar :)**

h2. Installation

You can simple install from rubygems:

bc. gem install mongoid_categorizable

or in Gemfile:

bc. gem 'mongoid_categorizable'

or as a Rails Plugin:

bc. script/plugin install git://github.com/icebreaker/mongoid_categorizable.git

h2. Basic Usage

To make a document categorizable you need to include @Mongoid::Categorizable@ into your document:

bc.. class Post
  include Mongoid::Document
  include Mongoid::Categorizable

  field :title
  field :content
end

p. And in your form:

bc.. <% form_for @post do |f| %>
  <p>
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </p>
  <p>
    <%= f.label :content %><br />
    <%= f.text_area :content %>
  </p>
  <p>
    <%= f.label :categories %><br />
    <%= f.text_field :categories %>
  </p>
  <p>
    <button type="submit">Send</button>
  </p>
<% end %>

p. In this case, the text fields for categories should receive the list of categories separated by comma (See below for how to change the separator).

p. Then your document will have the @categories@ and @categories_array@ getter and setter. @categories@ is as a plain string with categories separated by comma, and @categories_array@ an array representation.

h2. Finding Objects by Category

p. Categorized models get a scope called @categorized_with@, @categorized_with_all@, and @categorized_with_any@:

bc.. MyModel.categorized_with('foo')
MyModel.published.categorized_with('foo').count
MyModel.categorized_with_all('foo', 'bar')
MyModel.categorized_with_all(['foo', 'bar'])
MyModel.categorized_with_any('foo', 'bar')
MyModel.categorized_with_any(['foo', 'bar'])

h2. Categories Indexing

This module will automatically create an index of categories and their counts for you after saving the document. This can be used for a category cloud. See the following example to understand how to use it:

bc.. Post.create!(:categories => "food,ant,bee")
Post.create!(:categories => "juice,food,bee,zip")
Post.create!(:categories => "honey,strip,food")

Post.categories # will retrieve ["ant", "bee", "food", "honey", "juice", "strip", "zip"]
Post.categories_with_weight # will retrieve:
# [
#   ['ant', 1],
#   ['bee', 2],
#   ['food', 3],
#   ['honey', 1],
#   ['juice', 1],
#   ['strip', 1],
#   ['zip', 1]
# ]

p. If you don't want to use this feature, it is good to disable it to improve performance:

bc.. class Post
  include Mongoid::Document
  include Mongoid::Categorizable

  disable_categories_index! # will disable index creation

  field :title
  field :content
end

h2. Changing default separator

To change the default separator you may call the @categories_separator@ class method:

bc.. class Post
  include Mongoid::Document
  include Mongoid::Categorizable

  categories_separator ';' # will change categories separator to ;

  field :title
  field :content
end
